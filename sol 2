def is_match(message, pattern):
    m, n = len(message), len(pattern)
    
    # Initialize the DP table with False values
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True  # Empty pattern matches empty message

    # Fill in the first row where pattern might have leading '*'s
    for j in range(1, n + 1):
        if pattern[j - 1] == '*':
            dp[0][j] = dp[0][j - 1]

    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if pattern[j - 1] == '*':
                # '*' can either match zero characters or one/more characters
                dp[i][j] = dp[i][j - 1] or dp[i - 1][j]
            elif pattern[j - 1] == '?' or pattern[j - 1] == message[i - 1]:
                # '?' matches any single character, or exact character match
                dp[i][j] = dp[i - 1][j - 1]

    # The answer is whether the entire message matches the entire pattern
    return dp[m][n]
